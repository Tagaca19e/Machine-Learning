STEPS FOR MACHINE LEARNING:
Import the data
Clean the data
Split the data into Training and Test sets
Create a model -> what algorithm
Train the model
Make prediction 
Evaluate and improve

Numpy = multi dimensional array

Pandas = dataframe = 2dimensional data set(select row and col)

MatPlotLib = 2dimensional plotting library

Scikit-Learn  = decision trees and neural networks

Kaggle for data sets


Df = dataframe

Df.shape = results in the number of rows and columns 

df.hist() -> creating a histogram for the data

===============

SHORTCUTS: 

Blue = command mode
Green = edit mode

Esc key = command mode

H = list for help keyboard shortcuts 

Command mode + b = new cell below the current cell
Command mode + a = new cell above the current cell
Command mode + dd = delete a cell

Cell section -> click run all = this will run all the code for the file

Tab to see the intellisense 

shift + tab = to see the purpose of the function and the parameter it takes also do not forget to put cursor on the function


command + / = comment

ctrl  + enter = execute code

Project 1:

==================
TO IMPORT THE DATA: 

Import pandas as pd

df = pd.read_csv(‘yourData.csv’ || path for yourData)

================== 

CLEANING THE DATA:
(Removing duplicates, null values, and etc)

During this phase need to split to input set and output set

Input = our reference
Output = result

X = input
Y = output

X = df.drop(colums=[‘columnToRemove’])

X -> will result to a new data set without the the column that is removed 

y  = df[‘columnToBeStored’]

==================

CREATING THE MODEL:

We will use -> DECISION TREE 

#import the algorithm
From sklearn.tree import DecisionTreeClassifier

model = DecisionTreeClassifier()
model.fit (input, output)
model.predict ([ [input1 here], [input2 here] ])


20-25 and male = Hiphop
26-30 and male = Jazz
31-37 and male = Classical
20-25 and female = Dance
26-30 and female = Acoustic
31-35 and female = Classical


Model persistence:

STORING THE TRAINED MODEL. 

syntax: 

From sklearn.externals import joblib

data  = DecisionTreeClassifier()
data.fit(input, output)


joblib.dump(trainedData, ‘nameForYourFile’)


LOADING AN EXISTING TRAINED DATA:

model  = joblib.load(‘nameOfTheTrainedData’)

Model.predict([ [input here] ])
